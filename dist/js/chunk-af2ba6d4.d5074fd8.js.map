{"version":3,"sources":["webpack:///./src/components/calendar/calendarBody.vue?6d4d","webpack:///./src/components/Permanent/chips.vue?9c5c","webpack:///./node_modules/date-fns/esm/startOfDay/index.js","webpack:///./src/components/calendar/calendarBody.vue?01fb","webpack:///./node_modules/date-fns/esm/startOfWeek/index.js","webpack:///./node_modules/date-fns/esm/startOfISOWeek/index.js","webpack:///./node_modules/date-fns/esm/endOfMonth/index.js","webpack:///./node_modules/date-fns/esm/lastDayOfWeek/index.js","webpack:///./node_modules/date-fns/esm/lastDayOfISOWeek/index.js","webpack:///./node_modules/date-fns/esm/eachDayOfInterval/index.js","webpack:///./node_modules/date-fns/esm/startOfMonth/index.js","webpack:///./node_modules/date-fns/esm/getDaysInMonth/index.js","webpack:///./node_modules/date-fns/esm/areIntervalsOverlapping/index.js","webpack:///./node_modules/date-fns/esm/isSameDay/index.js","webpack:///./node_modules/date-fns/esm/isToday/index.js","webpack:///src/components/calendar/calendarBody.vue","webpack:///./src/components/calendar/calendarBody.vue?96ad","webpack:///./src/components/calendar/calendarBody.vue","webpack:///./node_modules/date-fns/esm/addMonths/index.js","webpack:///./node_modules/date-fns/esm/differenceInCalendarDays/index.js","webpack:///./src/components/Permanent/chips.vue?7dc6","webpack:///src/components/Permanent/chips.vue","webpack:///./src/components/Permanent/chips.vue?d643","webpack:///./src/components/Permanent/chips.vue","webpack:///./node_modules/date-fns/esm/subMonths/index.js","webpack:///./node_modules/date-fns/esm/isEqual/index.js"],"names":["startOfDay","dirtyDate","arguments","date","setHours","render","_vm","this","_h","$createElement","_c","_self","staticClass","_t","_l","i","key","class","today","day","interval","back","backMonth","next","nextMonth","isActive","isActiveStart","isActiveEnd","new","showNew","on","$event","setActiveDay","_v","_s","_f","phontom","hide","tasks","sliceHide","task","style","backgroundColor","color","staticRenderFns","startOfWeek","dirtyOptions","requiredArgs","options","locale","localeWeekStartsOn","weekStartsOn","defaultWeekStartsOn","toInteger","RangeError","toDate","getDay","diff","setDate","getDate","startOfISOWeek","endOfMonth","month","getMonth","setFullYear","getFullYear","lastDayOfWeek","lastDayOfISOWeek","eachDayOfInterval","dirtyInterval","startDate","start","endDate","end","endTime","getTime","dates","currentDate","step","Number","isNaN","push","startOfMonth","getDaysInMonth","year","monthIndex","lastDayOfMonth","Date","areIntervalsOverlapping","dirtyIntervalLeft","dirtyIntervalRight","length","undefined","intervalLeft","intervalRight","leftStartTime","leftEndTime","rightStartTime","rightEndTime","inclusive","isSameDay","dirtyDateLeft","dirtyDateRight","dateLeftStartOfDay","dateRightStartOfDay","isToday","now","props","activeDay","type","default","required","visibleMonth","events","Array","Object","data","first","computed","firstDay","lastDay","isIntervalReady","backNextMonthProperty","$props","forEach","normalInterval","created","setFirstTaskList","methods","intervalFistDayMonth","isWithinInterval","firstB","LastB","id","$emit","intersection","findIndex","intervalCl","intervalMonth","cl","params","setTasks","scanned","setInterval","arr","slice","map","watch","newValue","component","addMonths","dirtyAmount","amount","NaN","dayOfMonth","endOfDesiredMonth","setMonth","daysInMonth","MILLISECONDS_IN_DAY","differenceInCalendarDays","startOfDayLeft","startOfDayRight","timestampLeft","timestampRight","Math","round","attrs","img","user","name","stopPropagation","user_id","_e","components","userImg","close","Boolean","subMonths","isEqual","dirtyLeftDate","dirtyRightDate","dateLeft","dateRight"],"mappings":"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","file":"js/chunk-af2ba6d4.d5074fd8.js","sourcesContent":["import mod from \"-!../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--8-oneOf-1-0!../../../node_modules/css-loader/dist/cjs.js??ref--8-oneOf-1-1!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/postcss-loader/src/index.js??ref--8-oneOf-1-2!../../../node_modules/sass-loader/dist/cjs.js??ref--8-oneOf-1-3!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./calendarBody.vue?vue&type=style&index=0&id=85731edc&lang=scss&scoped=true&\"; export default mod; export * from \"-!../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--8-oneOf-1-0!../../../node_modules/css-loader/dist/cjs.js??ref--8-oneOf-1-1!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/postcss-loader/src/index.js??ref--8-oneOf-1-2!../../../node_modules/sass-loader/dist/cjs.js??ref--8-oneOf-1-3!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./calendarBody.vue?vue&type=style&index=0&id=85731edc&lang=scss&scoped=true&\"","import mod from \"-!../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--8-oneOf-1-0!../../../node_modules/css-loader/dist/cjs.js??ref--8-oneOf-1-1!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/postcss-loader/src/index.js??ref--8-oneOf-1-2!../../../node_modules/sass-loader/dist/cjs.js??ref--8-oneOf-1-3!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./chips.vue?vue&type=style&index=0&id=770d59b8&lang=scss&scoped=true&\"; export default mod; export * from \"-!../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--8-oneOf-1-0!../../../node_modules/css-loader/dist/cjs.js??ref--8-oneOf-1-1!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/postcss-loader/src/index.js??ref--8-oneOf-1-2!../../../node_modules/sass-loader/dist/cjs.js??ref--8-oneOf-1-3!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./chips.vue?vue&type=style&index=0&id=770d59b8&lang=scss&scoped=true&\"","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name startOfDay\n * @category Day Helpers\n * @summary Return the start of a day for the given date.\n *\n * @description\n * Return the start of a day for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the start of a day\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The start of a day for 2 September 2014 11:55:00:\n * var result = startOfDay(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 02 2014 00:00:00\n */\n\nexport default function startOfDay(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"app\"},[_vm._t(\"header\"),_c('div',{staticClass:\"wrap\"},_vm._l((_vm.getMonth),function(date,i){return _c('div',{key:i,class:[\n        { today: _vm.today(date.day) },\n        { interval: date.interval },\n        { back: date.backMonth },\n        { next: date.nextMonth },\n        { isActive: _vm.isActive(date.day) },\n        { isActiveStart: _vm.isActiveStart(date.day) },\n        { isActiveEnd: _vm.isActiveEnd(date.day) },\n        { new: date.showNew },\n        'day'\n      ],on:{\"click\":function($event){return _vm.setActiveDay(date)}}},[_c('div',{staticClass:\"day-wrap\"},[_c('div',[_vm._v(_vm._s(_vm._f(\"localRu\")(date.day)))]),_c('div',{class:['tasks', { phontom: _vm.hide(date.tasks) }]},_vm._l((_vm.sliceHide(date.tasks)),function(task,i){return _c('div',{key:i,staticClass:\"task\",style:({ backgroundColor: task.color })})}),0)])])}),0),_vm._t(\"footer\")],2)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","import toDate from '../toDate/index.js';\nimport toInteger from '../_lib/toInteger/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name startOfWeek\n * @category Week Helpers\n * @summary Return the start of a week for the given date.\n *\n * @description\n * Return the start of a week for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @returns {Date} the start of a week\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n *\n * @example\n * // The start of a week for 2 September 2014 11:55:00:\n * var result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Sun Aug 31 2014 00:00:00\n *\n * @example\n * // If the week starts on Monday, the start of the week for 2 September 2014 11:55:00:\n * var result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0), { weekStartsOn: 1 })\n * //=> Mon Sep 01 2014 00:00:00\n */\n\nexport default function startOfWeek(dirtyDate, dirtyOptions) {\n  requiredArgs(1, arguments);\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeWeekStartsOn = locale && locale.options && locale.options.weekStartsOn;\n  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);\n  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');\n  }\n\n  var date = toDate(dirtyDate);\n  var day = date.getDay();\n  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;\n  date.setDate(date.getDate() - diff);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}","import startOfWeek from '../startOfWeek/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name startOfISOWeek\n * @category ISO Week Helpers\n * @summary Return the start of an ISO week for the given date.\n *\n * @description\n * Return the start of an ISO week for the given date.\n * The result will be in the local timezone.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the start of an ISO week\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The start of an ISO week for 2 September 2014 11:55:00:\n * var result = startOfISOWeek(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Mon Sep 01 2014 00:00:00\n */\n\nexport default function startOfISOWeek(dirtyDate) {\n  requiredArgs(1, arguments);\n  return startOfWeek(dirtyDate, {\n    weekStartsOn: 1\n  });\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name endOfMonth\n * @category Month Helpers\n * @summary Return the end of a month for the given date.\n *\n * @description\n * Return the end of a month for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the end of a month\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The end of a month for 2 September 2014 11:55:00:\n * var result = endOfMonth(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 30 2014 23:59:59.999\n */\n\nexport default function endOfMonth(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var month = date.getMonth();\n  date.setFullYear(date.getFullYear(), month + 1, 0);\n  date.setHours(23, 59, 59, 999);\n  return date;\n}","import toDate from '../toDate/index.js';\nimport toInteger from '../_lib/toInteger/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name lastDayOfWeek\n * @category Week Helpers\n * @summary Return the last day of a week for the given date.\n *\n * @description\n * Return the last day of a week for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @returns {Date} the last day of a week\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n *\n * @example\n * // The last day of a week for 2 September 2014 11:55:00:\n * var result = lastDayOfWeek(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Sat Sep 06 2014 00:00:00\n *\n * @example\n * // If the week starts on Monday, the last day of the week for 2 September 2014 11:55:00:\n * var result = lastDayOfWeek(new Date(2014, 8, 2, 11, 55, 0), { weekStartsOn: 1 })\n * //=> Sun Sep 07 2014 00:00:00\n */\n\nexport default function lastDayOfWeek(dirtyDate, dirtyOptions) {\n  requiredArgs(1, arguments);\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeWeekStartsOn = locale && locale.options && locale.options.weekStartsOn;\n  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);\n  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6');\n  }\n\n  var date = toDate(dirtyDate);\n  var day = date.getDay();\n  var diff = (day < weekStartsOn ? -7 : 0) + 6 - (day - weekStartsOn);\n  date.setHours(0, 0, 0, 0);\n  date.setDate(date.getDate() + diff);\n  return date;\n}","import lastDayOfWeek from '../lastDayOfWeek/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name lastDayOfISOWeek\n * @category ISO Week Helpers\n * @summary Return the last day of an ISO week for the given date.\n *\n * @description\n * Return the last day of an ISO week for the given date.\n * The result will be in the local timezone.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the last day of an ISO week\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The last day of an ISO week for 2 September 2014 11:55:00:\n * var result = lastDayOfISOWeek(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Sun Sep 07 2014 00:00:00\n */\n\nexport default function lastDayOfISOWeek(dirtyDate) {\n  requiredArgs(1, arguments);\n  return lastDayOfWeek(dirtyDate, {\n    weekStartsOn: 1\n  });\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name eachDayOfInterval\n * @category Interval Helpers\n * @summary Return the array of dates within the specified time interval.\n *\n * @description\n * Return the array of dates within the specified time interval.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - The function was renamed from `eachDay` to `eachDayOfInterval`.\n *   This change was made to mirror the use of the word \"interval\" in standard ISO 8601:2004 terminology:\n *\n *   ```\n *   2.1.3\n *   time interval\n *   part of the time axis limited by two instants\n *   ```\n *\n *   Also, this function now accepts an object with `start` and `end` properties\n *   instead of two arguments as an interval.\n *   This function now throws `RangeError` if the start of the interval is after its end\n *   or if any date in the interval is `Invalid Date`.\n *\n *   ```javascript\n *   // Before v2.0.0\n *\n *   eachDay(new Date(2014, 0, 10), new Date(2014, 0, 20))\n *\n *   // v2.0.0 onward\n *\n *   eachDayOfInterval(\n *     { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) }\n *   )\n *   ```\n *\n * @param {Interval} interval - the interval. See [Interval]{@link docs/types/Interval}\n * @param {Object} [options] - an object with options.\n * @param {Number} [options.step=1] - the step to increment by. The value should be more than 1.\n * @returns {Date[]} the array with starts of days from the day of the interval start to the day of the interval end\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.step` must be a number greater than 1\n * @throws {RangeError} The start of an interval cannot be after its end\n * @throws {RangeError} Date in interval cannot be `Invalid Date`\n *\n * @example\n * // Each day between 6 October 2014 and 10 October 2014:\n * var result = eachDayOfInterval({\n *   start: new Date(2014, 9, 6),\n *   end: new Date(2014, 9, 10)\n * })\n * //=> [\n * //   Mon Oct 06 2014 00:00:00,\n * //   Tue Oct 07 2014 00:00:00,\n * //   Wed Oct 08 2014 00:00:00,\n * //   Thu Oct 09 2014 00:00:00,\n * //   Fri Oct 10 2014 00:00:00\n * // ]\n */\n\nexport default function eachDayOfInterval(dirtyInterval, options) {\n  requiredArgs(1, arguments);\n  var interval = dirtyInterval || {};\n  var startDate = toDate(interval.start);\n  var endDate = toDate(interval.end);\n  var endTime = endDate.getTime(); // Throw an exception if start date is after end date or if any date is `Invalid Date`\n\n  if (!(startDate.getTime() <= endTime)) {\n    throw new RangeError('Invalid interval');\n  }\n\n  var dates = [];\n  var currentDate = startDate;\n  currentDate.setHours(0, 0, 0, 0);\n  var step = options && 'step' in options ? Number(options.step) : 1;\n  if (step < 1 || isNaN(step)) throw new RangeError('`options.step` must be a number greater than 1');\n\n  while (currentDate.getTime() <= endTime) {\n    dates.push(toDate(currentDate));\n    currentDate.setDate(currentDate.getDate() + step);\n    currentDate.setHours(0, 0, 0, 0);\n  }\n\n  return dates;\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name startOfMonth\n * @category Month Helpers\n * @summary Return the start of a month for the given date.\n *\n * @description\n * Return the start of a month for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the start of a month\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The start of a month for 2 September 2014 11:55:00:\n * var result = startOfMonth(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Mon Sep 01 2014 00:00:00\n */\n\nexport default function startOfMonth(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  date.setDate(1);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name getDaysInMonth\n * @category Month Helpers\n * @summary Get the number of days in a month of the given date.\n *\n * @description\n * Get the number of days in a month of the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the number of days in a month\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // How many days are in February 2000?\n * var result = getDaysInMonth(new Date(2000, 1))\n * //=> 29\n */\n\nexport default function getDaysInMonth(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var year = date.getFullYear();\n  var monthIndex = date.getMonth();\n  var lastDayOfMonth = new Date(0);\n  lastDayOfMonth.setFullYear(year, monthIndex + 1, 0);\n  lastDayOfMonth.setHours(0, 0, 0, 0);\n  return lastDayOfMonth.getDate();\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name areIntervalsOverlapping\n * @category Interval Helpers\n * @summary Is the given time interval overlapping with another time interval?\n *\n * @description\n * Is the given time interval overlapping with another time interval? Adjacent intervals do not count as overlapping.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - The function was renamed from `areRangesOverlapping` to `areIntervalsOverlapping`.\n *   This change was made to mirror the use of the word \"interval\" in standard ISO 8601:2004 terminology:\n *\n *   ```\n *   2.1.3\n *   time interval\n *   part of the time axis limited by two instants\n *   ```\n *\n *   Also, this function now accepts an object with `start` and `end` properties\n *   instead of two arguments as an interval.\n *   This function now throws `RangeError` if the start of the interval is after its end\n *   or if any date in the interval is `Invalid Date`.\n *\n *   ```javascript\n *   // Before v2.0.0\n *\n *   areRangesOverlapping(\n *     new Date(2014, 0, 10), new Date(2014, 0, 20),\n *     new Date(2014, 0, 17), new Date(2014, 0, 21)\n *   )\n *\n *   // v2.0.0 onward\n *\n *   areIntervalsOverlapping(\n *     { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\n *     { start: new Date(2014, 0, 17), end: new Date(2014, 0, 21) }\n *   )\n *   ```\n *\n * @param {Interval} intervalLeft - the first interval to compare. See [Interval]{@link docs/types/Interval}\n * @param {Interval} intervalRight - the second interval to compare. See [Interval]{@link docs/types/Interval}\n * @param {Object} [options] - the object with options\n * @param {Boolean} [options.inclusive=false] - whether the comparison is inclusive or not\n * @returns {Boolean} whether the time intervals are overlapping\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} The start of an interval cannot be after its end\n * @throws {RangeError} Date in interval cannot be `Invalid Date`\n *\n * @example\n * // For overlapping time intervals:\n * areIntervalsOverlapping(\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\n *   { start: new Date(2014, 0, 17), end: new Date(2014, 0, 21) }\n * )\n * //=> true\n *\n * @example\n * // For non-overlapping time intervals:\n * areIntervalsOverlapping(\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\n *   { start: new Date(2014, 0, 21), end: new Date(2014, 0, 22) }\n * )\n * //=> false\n *\n * @example\n * // For adjacent time intervals:\n * areIntervalsOverlapping(\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\n *   { start: new Date(2014, 0, 20), end: new Date(2014, 0, 30) }\n * )\n * //=> false\n *\n * @example\n * // Using the inclusive option:\n * areIntervalsOverlapping(\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\n *   { start: new Date(2014, 0, 20), end: new Date(2014, 0, 24) }\n * )\n * //=> false\n * areIntervalsOverlapping(\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\n *   { start: new Date(2014, 0, 20), end: new Date(2014, 0, 24) },\n *   { inclusive: true }\n * )\n * //=> true\n */\n\nexport default function areIntervalsOverlapping(dirtyIntervalLeft, dirtyIntervalRight) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  requiredArgs(2, arguments);\n  var intervalLeft = dirtyIntervalLeft || {};\n  var intervalRight = dirtyIntervalRight || {};\n  var leftStartTime = toDate(intervalLeft.start).getTime();\n  var leftEndTime = toDate(intervalLeft.end).getTime();\n  var rightStartTime = toDate(intervalRight.start).getTime();\n  var rightEndTime = toDate(intervalRight.end).getTime(); // Throw an exception if start date is after end date or if any date is `Invalid Date`\n\n  if (!(leftStartTime <= leftEndTime && rightStartTime <= rightEndTime)) {\n    throw new RangeError('Invalid interval');\n  }\n\n  if (options.inclusive) {\n    return leftStartTime <= rightEndTime && rightStartTime <= leftEndTime;\n  }\n\n  return leftStartTime < rightEndTime && rightStartTime < leftEndTime;\n}","import startOfDay from '../startOfDay/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name isSameDay\n * @category Day Helpers\n * @summary Are the given dates in the same day?\n *\n * @description\n * Are the given dates in the same day?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the first date to check\n * @param {Date|Number} dateRight - the second date to check\n * @returns {Boolean} the dates are in the same day\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Are 4 September 06:00:00 and 4 September 18:00:00 in the same day?\n * var result = isSameDay(new Date(2014, 8, 4, 6, 0), new Date(2014, 8, 4, 18, 0))\n * //=> true\n */\n\nexport default function isSameDay(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeftStartOfDay = startOfDay(dirtyDateLeft);\n  var dateRightStartOfDay = startOfDay(dirtyDateRight);\n  return dateLeftStartOfDay.getTime() === dateRightStartOfDay.getTime();\n}","import isSameDay from '../isSameDay/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name isToday\n * @category Day Helpers\n * @summary Is the given date today?\n * @pure false\n *\n * @description\n * Is the given date today?\n *\n * > ⚠️ Please note that this function is not present in the FP submodule as\n * > it uses `Date.now()` internally hence impure and can't be safely curried.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to check\n * @returns {Boolean} the date is today\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // If today is 6 October 2014, is 6 October 14:00:00 today?\n * var result = isToday(new Date(2014, 9, 6, 14, 0))\n * //=> true\n */\n\nexport default function isToday(dirtyDate) {\n  requiredArgs(1, arguments);\n  return isSameDay(dirtyDate, Date.now());\n}","<template>\r\n  <div class=\"app\">\r\n    <slot name=\"header\"></slot>\r\n    <div class=\"wrap\">\r\n      <div\r\n        v-for=\"(date, i) in getMonth\"\r\n        :key=\"i\"\r\n        :class=\"[\r\n          { today: today(date.day) },\r\n          { interval: date.interval },\r\n          { back: date.backMonth },\r\n          { next: date.nextMonth },\r\n          { isActive: isActive(date.day) },\r\n          { isActiveStart: isActiveStart(date.day) },\r\n          { isActiveEnd: isActiveEnd(date.day) },\r\n          { new: date.showNew },\r\n          'day'\r\n        ]\"\r\n        @click=\"setActiveDay(date)\"\r\n      >\r\n        <div class=\"day-wrap\">\r\n          <div>{{ date.day | localRu }}</div>\r\n          <div :class=\"['tasks', { phontom: hide(date.tasks) }]\">\r\n            <div\r\n              v-for=\"(task, i) in sliceHide(date.tasks)\"\r\n              :key=\"i\"\r\n              :style=\"{ backgroundColor: task.color }\"\r\n              class=\"task\"\r\n            ></div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <slot name=\"footer\"></slot>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport {\r\n  endOfMonth,\r\n  startOfMonth,\r\n  lastDayOfISOWeek,\r\n  startOfISOWeek,\r\n  subMonths,\r\n  eachDayOfInterval,\r\n  differenceInCalendarDays,\r\n  areIntervalsOverlapping,\r\n  getDaysInMonth,\r\n  isToday,\r\n  isEqual,\r\n  isDate\r\n} from \"date-fns\";\r\nexport default {\r\n  props: {\r\n    activeDay: {\r\n      type: Date,\r\n      default: () => {\r\n        return new Date();\r\n      },\r\n      required: false\r\n    },\r\n    visibleMonth: {\r\n      type: Date\r\n    },\r\n    events: {\r\n      type: Array\r\n    },\r\n    interval: {\r\n      type: Object\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      first: true\r\n    };\r\n  },\r\n  computed: {\r\n    firstDay() {\r\n      return startOfISOWeek(endOfMonth(subMonths(this.visibleMonth, 1)));\r\n    },\r\n\r\n    lastDay() {\r\n      return lastDayOfISOWeek(endOfMonth(this.visibleMonth));\r\n    },\r\n\r\n    isIntervalReady() {\r\n      return (\r\n        this.$props.interval &&\r\n        isDate(this.interval.start) &&\r\n        isDate(this.interval.end)\r\n      );\r\n    },\r\n\r\n    getMonth() {\r\n      let month = eachDayOfInterval({\r\n        start: this.firstDay,\r\n        end: this.lastDay\r\n      }).map(day => ({ day }));\r\n      this.backNextMonthProperty(month);\r\n      if (this.$props.events) {\r\n        this.$props.events.forEach(task => {\r\n          this.normalInterval(task.startdate, task.deadline, this.setTasks, {\r\n            month,\r\n            task\r\n          });\r\n        });\r\n      }\r\n      if (this.isIntervalReady) {\r\n        this.normalInterval(\r\n          this.interval.start,\r\n          this.interval.end,\r\n          this.setInterval,\r\n          { month }\r\n        );\r\n      }\r\n      return month;\r\n    }\r\n  },\r\n  created() {\r\n    if (this.$props.events) {\r\n      this.setFirstTaskList();\r\n    }\r\n  },\r\n\r\n  methods: {\r\n    backNextMonthProperty(month) {\r\n      let intervalFistDayMonth = differenceInCalendarDays(\r\n        startOfMonth(this.visibleMonth),\r\n        this.firstDay\r\n      );\r\n      let intervalLastDayMonth = differenceInCalendarDays(\r\n        this.lastDay,\r\n        endOfMonth(this.visibleMonth)\r\n      );\r\n      let monthDayCount = getDaysInMonth(this.visibleMonth);\r\n      for (let i = 0; i < intervalFistDayMonth + intervalLastDayMonth; i++) {\r\n        intervalFistDayMonth > i\r\n          ? (month[i].backMonth = true)\r\n          : (month[i + monthDayCount].nextMonth = true);\r\n      }\r\n    },\r\n\r\n    isWithinInterval(startdate, deadline) {\r\n      let stD = new Date(startdate).setHours(0, 0, 0, 0);\r\n      let dlD = new Date(deadline).setHours(0, 0, 0, 0);\r\n      let firstB = stD <= this.activeDay;\r\n      let LastB = this.activeDay <= dlD;\r\n      return firstB && LastB;\r\n    },\r\n\r\n    setFirstTaskList() {\r\n      let id = [];\r\n      this.events.forEach(task => {\r\n        if (this.isWithinInterval(task.startdate, task.deadline)) {\r\n          id.push(task.id);\r\n        }\r\n      });\r\n      this.$emit(\"setTasks\", id);\r\n    },\r\n\r\n    normalInterval(start, end, cl, params) {\r\n      let intersection = areIntervalsOverlapping(\r\n        { start: new Date(start), end: new Date(end) },\r\n        { start: new Date(this.firstDay), end: new Date(this.lastDay) }\r\n      );\r\n\r\n      if (intersection) {\r\n        let intervalCl = differenceInCalendarDays(\r\n          new Date(end),\r\n          new Date(start)\r\n        );\r\n        let intervalMonth = differenceInCalendarDays(\r\n          new Date(this.lastDay),\r\n          new Date(this.firstDay)\r\n        );\r\n        let findIndex = differenceInCalendarDays(\r\n          new Date(start),\r\n          this.firstDay\r\n        );\r\n        if (findIndex + intervalCl > intervalMonth) {\r\n          intervalCl = intervalMonth - findIndex;\r\n        }\r\n        if (findIndex < 0) {\r\n          intervalCl += findIndex;\r\n          findIndex = 0;\r\n        }\r\n        cl(findIndex, intervalCl, params);\r\n      }\r\n    },\r\n\r\n    setTasks(findIndex, intervalTask, { month, task }) {\r\n      for (let i = findIndex; i < intervalTask + findIndex + 1; i++) {\r\n        if (!month[i].tasks) {\r\n          month[i].tasks = [];\r\n        }\r\n        if (i === findIndex) {\r\n          month[i].showNew = !task.scanned;\r\n        }\r\n        month[i].tasks.push(task);\r\n      }\r\n    },\r\n\r\n    setInterval(findIndex, intervalTask, { month }) {\r\n      for (let i = findIndex; i < intervalTask + findIndex; i++) {\r\n        month[i].interval = true;\r\n      }\r\n    },\r\n\r\n    today(day) {\r\n      return isToday(day);\r\n    },\r\n\r\n    sliceHide(arr) {\r\n      if (arr) return arr.slice(0, 3);\r\n      return null;\r\n    },\r\n\r\n    setActiveDay({ day, tasks }) {\r\n      this.$emit(\"setDay\", day);\r\n      this.$emit(\"setTasks\", tasks ? tasks.map(i => i.id) : []);\r\n    },\r\n\r\n    hide(tasks) {\r\n      return tasks && tasks.length > 4;\r\n    },\r\n\r\n    isActive(day) {\r\n      if (!this.$props.interval) {\r\n        return isEqual(day, this.activeDay);\r\n      }\r\n      return false;\r\n    },\r\n\r\n    isActiveStart(day) {\r\n      if (this.$props.interval) {\r\n        return isEqual(day, this.interval.start);\r\n      }\r\n    },\r\n\r\n    isActiveEnd(day) {\r\n      if (this.$props.interval) {\r\n        return isEqual(day, this.interval.end);\r\n      }\r\n    }\r\n  },\r\n  watch: {\r\n    events(newValue) {\r\n      if (newValue.length) {\r\n        this.setFirstTaskList();\r\n      }\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n@import \"@/assets/pages/calendar\";\r\n</style>\r\n","import mod from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./calendarBody.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./calendarBody.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./calendarBody.vue?vue&type=template&id=85731edc&scoped=true&\"\nimport script from \"./calendarBody.vue?vue&type=script&lang=js&\"\nexport * from \"./calendarBody.vue?vue&type=script&lang=js&\"\nimport style0 from \"./calendarBody.vue?vue&type=style&index=0&id=85731edc&lang=scss&scoped=true&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"85731edc\",\n  null\n  \n)\n\nexport default component.exports","import toInteger from '../_lib/toInteger/index.js';\nimport toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name addMonths\n * @category Month Helpers\n * @summary Add the specified number of months to the given date.\n *\n * @description\n * Add the specified number of months to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of months to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the months added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 5 months to 1 September 2014:\n * var result = addMonths(new Date(2014, 8, 1), 5)\n * //=> Sun Feb 01 2015 00:00:00\n */\n\nexport default function addMonths(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var amount = toInteger(dirtyAmount);\n\n  if (isNaN(amount)) {\n    return new Date(NaN);\n  }\n\n  if (!amount) {\n    // If 0 months, no-op to avoid changing times in the hour before end of DST\n    return date;\n  }\n\n  var dayOfMonth = date.getDate(); // The JS Date object supports date math by accepting out-of-bounds values for\n  // month, day, etc. For example, new Date(2020, 1, 0) returns 31 Dec 2019 and\n  // new Date(2020, 13, 1) returns 1 Feb 2021.  This is *almost* the behavior we\n  // want except that dates will wrap around the end of a month, meaning that\n  // new Date(2020, 13, 31) will return 3 Mar 2021 not 28 Feb 2021 as desired. So\n  // we'll default to the end of the desired month by adding 1 to the desired\n  // month and using a date of 0 to back up one day to the end of the desired\n  // month.\n\n  var endOfDesiredMonth = new Date(date.getTime());\n  endOfDesiredMonth.setMonth(date.getMonth() + amount + 1, 0);\n  var daysInMonth = endOfDesiredMonth.getDate();\n\n  if (dayOfMonth >= daysInMonth) {\n    // If we're already at the end of the month, then this is the correct date\n    // and we're done.\n    return endOfDesiredMonth;\n  } else {\n    // Otherwise, we now know that setting the original day-of-month value won't\n    // cause an overflow, so set the desired day-of-month. Note that we can't\n    // just set the date of `endOfDesiredMonth` because that object may have had\n    // its time changed in the unusual case where where a DST transition was on\n    // the last day of the month and its local time was in the hour skipped or\n    // repeated next to a DST transition.  So we use `date` instead which is\n    // guaranteed to still have the original time.\n    date.setFullYear(endOfDesiredMonth.getFullYear(), endOfDesiredMonth.getMonth(), dayOfMonth);\n    return date;\n  }\n}","import getTimezoneOffsetInMilliseconds from '../_lib/getTimezoneOffsetInMilliseconds/index.js';\nimport startOfDay from '../startOfDay/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\nvar MILLISECONDS_IN_DAY = 86400000;\n/**\n * @name differenceInCalendarDays\n * @category Day Helpers\n * @summary Get the number of calendar days between the given dates.\n *\n * @description\n * Get the number of calendar days between the given dates. This means that the times are removed\n * from the dates and then the difference in days is calculated.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of calendar days\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many calendar days are between\n * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?\n * var result = differenceInCalendarDays(\n *   new Date(2012, 6, 2, 0, 0),\n *   new Date(2011, 6, 2, 23, 0)\n * )\n * //=> 366\n * // How many calendar days are between\n * // 2 July 2011 23:59:00 and 3 July 2011 00:01:00?\n * var result = differenceInCalendarDays(\n *   new Date(2011, 6, 3, 0, 1),\n *   new Date(2011, 6, 2, 23, 59)\n * )\n * //=> 1\n */\n\nexport default function differenceInCalendarDays(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var startOfDayLeft = startOfDay(dirtyDateLeft);\n  var startOfDayRight = startOfDay(dirtyDateRight);\n  var timestampLeft = startOfDayLeft.getTime() - getTimezoneOffsetInMilliseconds(startOfDayLeft);\n  var timestampRight = startOfDayRight.getTime() - getTimezoneOffsetInMilliseconds(startOfDayRight); // Round the number of days to the nearest integer\n  // because the number of milliseconds in a day is not constant\n  // (e.g. it's different in the day of the daylight saving time clock shift)\n\n  return Math.round((timestampLeft - timestampRight) / MILLISECONDS_IN_DAY);\n}","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('span',{staticClass:\"chip\"},[_c('user-img',{staticClass:\"chip__img\",attrs:{\"src\":{ img: _vm.user.img, name: _vm.user.name },\"className\":\"sm\"}}),_c('span',{staticClass:\"chip__name\"},[_vm._v(_vm._s(_vm.user.name))]),(_vm.close)?_c('i',{staticClass:\"icon-close\",on:{\"click\":function($event){$event.stopPropagation();return _vm.$emit('deleteChips', _vm.user.user_id)}}}):_vm._e()],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n  <span class=\"chip\">\r\n    <user-img\r\n      :src=\"{ img: user.img, name: user.name }\"\r\n      class=\"chip__img\"\r\n      className=\"sm\"\r\n    ></user-img>\r\n    <span class=\"chip__name\">{{ user.name }}</span>\r\n    <i\r\n      v-if=\"close\"\r\n      @click.stop=\"$emit('deleteChips', user.user_id)\"\r\n      class=\"icon-close\"\r\n    ></i>\r\n  </span>\r\n</template>\r\n\r\n<script>\r\nimport userImg from \"@/components/Permanent/img-user\";\r\nexport default {\r\n  components: {\r\n    userImg\r\n  },\r\n\r\n  props: {\r\n    user: Object,\r\n    close: {\r\n      type: Boolean,\r\n      default: false\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n.chip {\r\n  margin: 5px 10px 5px 0px;\r\n  display: inline-flex;\r\n  align-items: center;\r\n  position: relative;\r\n  padding: 2px 5px 2px 0px;\r\n  background: $bg-gray;\r\n  border-radius: 15px;\r\n  color: $text-dark;\r\n  white-space: nowrap;\r\n  &:first-child {\r\n    margin-left: 5px;\r\n  }\r\n  &__img {\r\n    position: absolute;\r\n    left: -2px;\r\n    width: 32px;\r\n    height: 32px;\r\n    border-radius: 50%;\r\n  }\r\n  &__name {\r\n    margin: 0px 5px 0 34px;\r\n  }\r\n}\r\n</style>\r\n","import mod from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./chips.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./chips.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./chips.vue?vue&type=template&id=770d59b8&scoped=true&\"\nimport script from \"./chips.vue?vue&type=script&lang=js&\"\nexport * from \"./chips.vue?vue&type=script&lang=js&\"\nimport style0 from \"./chips.vue?vue&type=style&index=0&id=770d59b8&lang=scss&scoped=true&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"770d59b8\",\n  null\n  \n)\n\nexport default component.exports","import toInteger from '../_lib/toInteger/index.js';\nimport addMonths from '../addMonths/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name subMonths\n * @category Month Helpers\n * @summary Subtract the specified number of months from the given date.\n *\n * @description\n * Subtract the specified number of months from the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of months to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the months subtracted\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Subtract 5 months from 1 February 2015:\n * var result = subMonths(new Date(2015, 1, 1), 5)\n * //=> Mon Sep 01 2014 00:00:00\n */\n\nexport default function subMonths(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addMonths(dirtyDate, -amount);\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name isEqual\n * @category Common Helpers\n * @summary Are the given dates equal?\n *\n * @description\n * Are the given dates equal?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the first date to compare\n * @param {Date|Number} dateRight - the second date to compare\n * @returns {Boolean} the dates are equal\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Are 2 July 2014 06:30:45.000 and 2 July 2014 06:30:45.500 equal?\n * var result = isEqual(\n *   new Date(2014, 6, 2, 6, 30, 45, 0),\n *   new Date(2014, 6, 2, 6, 30, 45, 500)\n * )\n * //=> false\n */\n\nexport default function isEqual(dirtyLeftDate, dirtyRightDate) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyLeftDate);\n  var dateRight = toDate(dirtyRightDate);\n  return dateLeft.getTime() === dateRight.getTime();\n}"],"sourceRoot":""}